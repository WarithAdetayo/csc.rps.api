# Generated by Django 5.1.6 on 2025-02-28 22:07

import uuid

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models

import appdata.models.csc_rps_user
import appdata.models.upload_history
import commons.utils.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="AcademicSession",
            fields=[
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date Created"
                    ),
                ),
                (
                    "date_last_modified",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date Last Modified"
                    ),
                ),
                (
                    "created_by_user",
                    models.JSONField(blank=True, verbose_name="Created by user"),
                ),
                (
                    "last_modified_by_user",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Last modified by user"
                    ),
                ),
                (
                    "academic_session_id",
                    models.CharField(
                        default=uuid.uuid4,
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Session Id",
                    ),
                ),
                (
                    "session",
                    models.CharField(
                        help_text="Academic Session",
                        max_length=16,
                        validators=[commons.utils.validators.session_validator],
                        verbose_name="Academic Session",
                    ),
                ),
            ],
            options={
                "verbose_name": "Academic Session",
                "verbose_name_plural": "Academic Sessions",
                "db_table": "academic_session",
            },
        ),
        migrations.CreateModel(
            name="Level",
            fields=[
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date Created"
                    ),
                ),
                (
                    "date_last_modified",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date Last Modified"
                    ),
                ),
                (
                    "created_by_user",
                    models.JSONField(blank=True, verbose_name="Created by user"),
                ),
                (
                    "last_modified_by_user",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Last modified by user"
                    ),
                ),
                (
                    "level_id",
                    models.CharField(
                        default=uuid.uuid4,
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Level Id",
                    ),
                ),
                (
                    "level",
                    models.PositiveIntegerField(unique=True, verbose_name="Level"),
                ),
            ],
            options={
                "verbose_name": "Department Level",
                "verbose_name_plural": "Department Levels",
                "db_table": "level",
            },
        ),
        migrations.CreateModel(
            name="Student",
            fields=[
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date Created"
                    ),
                ),
                (
                    "date_last_modified",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date Last Modified"
                    ),
                ),
                (
                    "created_by_user",
                    models.JSONField(blank=True, verbose_name="Created by user"),
                ),
                (
                    "last_modified_by_user",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Last modified by user"
                    ),
                ),
                (
                    "student_id",
                    models.CharField(
                        default=uuid.uuid4,
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Student Id",
                    ),
                ),
                (
                    "matric_number",
                    models.CharField(
                        max_length=64, unique=True, verbose_name="Matric Number"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=255, verbose_name="First name"),
                ),
                ("surname", models.CharField(max_length=255, verbose_name="Surname")),
                (
                    "middle_name",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Middle name",
                    ),
                ),
                (
                    "session_of_entry",
                    models.CharField(
                        help_text="Entry Session into Department",
                        max_length=16,
                        validators=[commons.utils.validators.session_validator],
                        verbose_name="Entry Session into Department",
                    ),
                ),
                (
                    "year_of_admission",
                    models.PositiveIntegerField(
                        help_text="Year of Admission", verbose_name="Year of Admission"
                    ),
                ),
                (
                    "mode_of_entry",
                    models.CharField(
                        choices=[
                            ("DE", "DE"),
                            ("UTME", "UTME"),
                            ("TRANSFER", "TRANSFER"),
                        ],
                        max_length=16,
                        verbose_name="Mode of Entry",
                    ),
                ),
                (
                    "dob",
                    models.DateField(
                        help_text="Date of Birth", verbose_name="Date of Birth"
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("MALE", "MALE"), ("FEMALE", "FEMALE")],
                        help_text="Male or Female (we want only sane people here)",
                        max_length=6,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "school_email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        validators=[commons.utils.validators.student_email_validator],
                        verbose_name="Student Email Address",
                    ),
                ),
            ],
            options={
                "verbose_name": "Student Profile",
                "verbose_name_plural": "Student Profiles",
                "db_table": "student",
            },
        ),
        migrations.CreateModel(
            name="CSCRPSUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "user_id",
                    models.CharField(
                        blank=True,
                        default=uuid.uuid4,
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                        verbose_name="User Id",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=255,
                        unique=True,
                        validators=[django.core.validators.EmailValidator()],
                        verbose_name="Email Address",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="First Name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="Last Name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                ("date_joined", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_verified", models.BooleanField(default=False)),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=appdata.models.csc_rps_user.upload_avatar,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "CSC RPS User Account",
                "verbose_name_plural": "CSC RPS User Accounts",
                "db_table": "csc_rps_user",
            },
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date Created"
                    ),
                ),
                (
                    "date_last_modified",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date Last Modified"
                    ),
                ),
                (
                    "created_by_user",
                    models.JSONField(blank=True, verbose_name="Created by user"),
                ),
                (
                    "last_modified_by_user",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Last modified by user"
                    ),
                ),
                (
                    "course_id",
                    models.CharField(
                        default=uuid.uuid4,
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Course Id",
                    ),
                ),
                (
                    "course_code",
                    models.CharField(
                        max_length=8, unique=True, verbose_name="Course Code"
                    ),
                ),
                (
                    "course_title",
                    models.CharField(max_length=512, verbose_name="Course Title"),
                ),
                (
                    "course_unit",
                    models.PositiveSmallIntegerField(verbose_name="Course Unit"),
                ),
                (
                    "level",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="appdata.level",
                        verbose_name="Level",
                    ),
                ),
            ],
            options={
                "verbose_name": "Department Course",
                "verbose_name_plural": "Department Courses",
                "db_table": "course",
            },
        ),
        migrations.CreateModel(
            name="SessionRegistration",
            fields=[
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date Created"
                    ),
                ),
                (
                    "date_last_modified",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date Last Modified"
                    ),
                ),
                (
                    "created_by_user",
                    models.JSONField(blank=True, verbose_name="Created by user"),
                ),
                (
                    "last_modified_by_user",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Last modified by user"
                    ),
                ),
                (
                    "session_registration",
                    models.CharField(
                        default=uuid.uuid4,
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Session Registration Id",
                    ),
                ),
                (
                    "level",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="appdata.level",
                        verbose_name="Level",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        help_text="Academic Session",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="appdata.academicsession",
                        verbose_name="Academic Session",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="appdata.student",
                        verbose_name="Student",
                    ),
                ),
            ],
            options={
                "verbose_name": "Session Registration",
                "verbose_name_plural": "Session Registrations",
                "db_table": "session_registration",
            },
        ),
        migrations.CreateModel(
            name="UploadHistory",
            fields=[
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date Created"
                    ),
                ),
                (
                    "date_last_modified",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date Last Modified"
                    ),
                ),
                (
                    "created_by_user",
                    models.JSONField(blank=True, verbose_name="Created by user"),
                ),
                (
                    "last_modified_by_user",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Last modified by user"
                    ),
                ),
                (
                    "upload_history_id",
                    models.CharField(
                        default=uuid.uuid4,
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Upload History Id",
                    ),
                ),
                (
                    "upload_timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="Upload Timestamp",
                    ),
                ),
                (
                    "uploaded_file",
                    models.FileField(
                        upload_to=appdata.models.upload_history.upload_file
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        help_text="Course",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="appdata.course",
                        verbose_name="Course",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        help_text="Academic Registration",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="appdata.academicsession",
                        verbose_name="Academic Registration",
                    ),
                ),
            ],
            options={
                "verbose_name": "Upload History",
                "verbose_name_plural": "Upload Histories",
                "db_table": "upload_history",
            },
        ),
        migrations.CreateModel(
            name="CourseRegistration",
            fields=[
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date Created"
                    ),
                ),
                (
                    "date_last_modified",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date Last Modified"
                    ),
                ),
                (
                    "created_by_user",
                    models.JSONField(blank=True, verbose_name="Created by user"),
                ),
                (
                    "last_modified_by_user",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Last modified by user"
                    ),
                ),
                (
                    "course_registration_id",
                    models.CharField(
                        default=uuid.uuid4,
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Course Registration Id",
                    ),
                ),
                (
                    "score",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Score"
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        help_text="Course",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="appdata.course",
                        verbose_name="Course",
                    ),
                ),
                (
                    "session_registration",
                    models.ForeignKey(
                        help_text="Session Registration",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="appdata.sessionregistration",
                        verbose_name="Session Registration",
                    ),
                ),
            ],
            options={
                "verbose_name": "Course Registration",
                "verbose_name_plural": "Course Registrations",
                "db_table": "course_registration",
                "constraints": [
                    models.UniqueConstraint(
                        fields=("session_registration", "course"),
                        name="unique_course_registration",
                        violation_error_message="A course can only be registered once per student session registration",
                    )
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="sessionregistration",
            constraint=models.UniqueConstraint(
                fields=("session", "student"),
                name="unique_session_registration",
                violation_error_message="Student can only have one registration per session",
            ),
        ),
    ]
